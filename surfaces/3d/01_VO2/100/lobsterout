LOBSTER v4.0.0 (g++ 5.4.0)
Copyright (C) 2020 by Chair of Solid-State and Quantum Chemistry, RWTH Aachen.
All rights reserved. Contributions by S. Maintz, V. L. Deringer, M. Esser, R. Nelson, C. Ertural, A. L. Tchougreeff and R. Dronskowski
starting on host nid09121 on 2021-09-22 at 13:54:49 PDT using 66 threads
detecting used PAW program... VASP
initializing PW system...
initializing Augmentations...
recommended basis functions:
O 2p 2s 
V 3d 4s 
initializing LCAO system...
setting up local basis functions...
 O (pbeVaspFit2015) 2s 2p_y 2p_z 2p_x 
 V (pbeVaspFit2015) 4s 3d_xy 3d_yz 3d_z^2 3d_xz 3d_x^2-y^2 
INFO: There are more PAW bands than local basis functions available.
INFO: To prevent trouble in orthonormalization and Hamiltonian reconstruction
INFO: the PAW bands from 89 and upwards will be ignored.
setting up CO interactions... found 4 interactions.
projecting...
WARNING: Cannot use the tetrahedron method for k-space integration and must fall
WARNING: back to Gaussian smearing which can take significantly longer. Make
WARNING: sure to use the tetrahedron method whenever applicable.

calculating overlaps...
post-processing projection...
WARNING: 1 of 144 k-points could not be orthonormalized with an accuracy of 1.0E-5.
WARNING: Generally, this is not a critical error. But to help you analyze it,
WARNING: I dumped the band overlap matrices to the file bandOverlaps.lobster.
WARNING: Please check how much they deviate from the identity matrix and decide to
WARNING: use your results only, if you are sure that this is ok.

spillings for spin channel 1
abs. total  spilling:   5.78%
abs. charge spilling:   1.00%

spillings for spin channel 2
abs. total  spilling:   5.69%
abs. charge spilling:   0.97%

calculating pDOS... using Gaussian smearing integration (sigma=0.2eV)
writing DOSCAR.lobster...
writing COOPCAR.lobster and ICOOPLIST.lobster...
calculating pCOHPs... using Gaussian smearing integration (sigma=0.2eV)
writing COHPCAR.lobster and ICOHPLIST.lobster...
writing CHARGE.lobster and GROSSPOP.lobster...
finished in 0 h  2 min 53 s 771 ms of wall time
            2 h 23 min 48 s 340 ms of user time
            0 h 14 min 35 s 240 ms of sys  time
